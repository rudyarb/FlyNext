// This component was generated by AI - Claude 3.5 Sonnet (Preview)
'use client';

import { useState } from 'react';
import { Swiper, SwiperSlide } from 'swiper/react';
import { Navigation, Pagination, A11y } from 'swiper/modules';
import ImageModal from './ImageModal';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

interface ImageCarouselProps {
  images: string[];
  alt: string;
  height?: 'h-64' | 'h-96';
}

export default function ImageCarousel({ images, alt, height = 'h-96' }: ImageCarouselProps) {
  const [selectedImageIndex, setSelectedImageIndex] = useState<number | null>(null);

  // Helper function to get appropriate image size
  const getOptimizedImageUrl = (url: string, size: 'thumbnail' | 'full') => {
    // If the URL is already using a CDN or image service, you can modify it here
    // For now, we'll just return the original URL
    // Example with a CDN: return `${url}?width=${size === 'thumbnail' ? '600' : '1200'}&quality=80`;
    return url;
  };

  return (
    <>
      <div className={`w-full ${height} relative carousel-container`}>
        <Swiper
          modules={[Navigation, Pagination, A11y]}
          spaceBetween={0}
          slidesPerView={1}
          navigation
          pagination={{ clickable: true }}
          loop={true}
          className={`w-full ${height} swiper-container`}
        >
          {images.map((image, index) => (
            <SwiperSlide key={index}>
              <img
                src={getOptimizedImageUrl(image, 'thumbnail')}
                alt={`${alt} - Image ${index + 1}`}
                className={`w-full ${height} object-cover cursor-zoom-in hover:opacity-90 transition-opacity`}
                onClick={() => setSelectedImageIndex(index)}
                loading="lazy"
                sizes="(max-width: 768px) 100vw, 800px"
              />
            </SwiperSlide>
          ))}
        </Swiper>
      </div>
      
      {selectedImageIndex !== null && (
        <ImageModal
          src={getOptimizedImageUrl(images[selectedImageIndex], 'full')}
          images={images.map(img => getOptimizedImageUrl(img, 'full'))}
          alt={alt}
          initialSlide={selectedImageIndex}
          onClose={() => setSelectedImageIndex(null)}
        />
      )}
    </>
  );
}